=========================================================================================================
=========================================================================================================
=========================================================================================================
=========================================================================================================
=========================================================================================================
=========================================================================================================
=========================================================================================================
=========================================================================================================
=========================================================================================================
=========================================================================================================
=========================================================================================================
=========================================================================================================
=========================================================================================================
=========================================================================================================
=========================================================================================================
=========================================================================================================
=========================================================================================================
=========================================================================================================
struct 是 值型別，用來表示小型、不可變或簡單的資料集合。
class 是 參考型別，適合複雜邏輯、需要繼承、多型的物件導向設計。

class（類別） → 參考型別 (Reference Type)
建立物件時，會放在 Heap（堆積記憶體）。
變數本身存的是「參考 (Reference)」，指向 Heap 的物件。
class Person { public string Name; }
Person p1 = new Person(); // p1 在 Stack，物件在 Heap


struct（結構體） → 值型別 (Value Type)
建立變數時，資料會直接存在 Stack（堆疊記憶體）（或內嵌在其他物件裡）。
複製變數時，會複製整份資料。

Stack = 書疊在桌上，你只拿最上面那本 → 速度快、規矩多
Heap = 倉庫的大箱子，你可以放任何東西，但找起來比較慢 → 空間大、靈活，但要有人整理

4️⃣ 在 C# 裡的應用
int a = 10; → 存在 Stack
var obj = new MyClass(); → 物件存在 Heap，obj 這個「指標」在 Stack 上

Stack 跟 Heap 都是在 RAM（隨機存取記憶體）上分配空間，只是使用方式不一樣。
差別：
特性			Stack						Heap
位置			RAM 的一小塊固定區域			RAM 的大區域，靈活分配
速度			很快（像疊書）					較慢（要找空位）
管理			自動（進入/離開函式就自動收掉）	需要程式或 GC 幫忙整理
適合存什麼	小變數、函式暫存資料			大物件、陣列、class 物件

所以它們都在記憶體裡，但Stack 是「快速、固定」，Heap 是**「大而彈性，但慢一些」**。
=========================================================================================================
枚舉 → int：允許 (int)myEnum（因為 enum 本質就是 int）
int → 枚舉：必須 (MyEnum)myInt（強制轉型，避免誤用）

📌 例子：
OrderStatus s1 = OrderStatus.Delivered; // 枚舉
int i = (int)s1;                        // enum → int
OrderStatus s2 = (OrderStatus)i;        // int → enum
=========================================================================================================
資料夾	內容								性質			是否要進 Git
bin/	最終輸出（.exe、.dll、pdb、config…）	編譯結果		❌ 忽略
obj/	中繼檔（obj、g.cs、assets.json…）	編譯過程暫存	❌ 忽略

👉 總結：
bin/ 是 最終產物
obj/ 是 過程中產物
兩者都不應該進 Git，只要有 .csproj 與原始碼，其他人就能重新建出來。

原始碼（.cs、.config、.resx）
⬇️ 編譯器 (csc / msbuild)
中繼檔案 → 存放在 obj/ 資料夾
⬇️ 連結 / 輸出
最終輸出 → 存放在 bin/ 資料夾
=========================================================================================================
During the login process, your phone receives a text message with a one-time passcode => Something you have
You enter your PIN to make a deposit(訂金) into an ATM => Something you know
You can use your fingerprint to unlock the door to the data center => Something you are
Your login will not work unless you are connected to the VPN => Somewhere you are

1. Something you have（你擁有的東西）
定義：使用者必須持有的物理或電子物件來驗證身份。
範例：智慧卡（smart card）、OTP 令牌（token）、手機收到的驗證碼、USB 安全金鑰（YubiKey）。

2. Something you know（你知道的東西）
定義：使用者必須知道的秘密資訊來驗證身份。
範例：密碼（password）、PIN、答案問題（security question）。

3. Something you are（你是誰）
定義：基於使用者的生物特徵來驗證身份。
範例：指紋、虹膜掃描、臉部辨識、聲紋、生物特徵認證。

4. Somewhere you are（你在哪裡）
定義：根據使用者的地理位置或裝置位置來驗證身份。
範例：GPS 定位、IP 位址檢查、Wi-Fi 網路位置、VPN 登入限制。

💡 補充：
多因素認證（MFA, Multi-Factor Authentication）就是要求 至少兩種不同類型的因素，
例如「Something you have + Something you know」或「Something you know + Something you are」，大幅提升安全性。
=========================================================================================================
A guard checks the identification of all visitors / 檢查每個訪客的身分證 => Operational
All returns must be approved by a Vice President(副總) => Managerial
A generator is used during a power outage(停電) => Physical
Building doors can be unlocked with an access card => Physical
System logs are transferred automatically to a SIEM => Technical

Operational：人員每天執行的程序
Managerial：政策、授權、策略決策
Physical：保護建築、設備、人員
Technical：依靠技術或系統自動執行的控制

✅ 總結：
Control categories describe the type of security applied to a task or event.
控制類別描述了應用於某項任務或事件的安全類型。

Operational controls are often implemented by people instead of systems.
操作性控制（Operational controls）通常由人員執行，而非系統自動化完成。

Security guards and awareness programs are examples of an operational control.
保全人員和資安意識訓練計畫（awareness programs）都是操作性控制的範例。

Managerial controls are administrative controls associated with security design and implementation.
管理性控制（Managerial controls）是與安全設計與實施相關的管理性控制（administrative controls）。

A set of policies and procedures would be an example of a managerial control.
一套政策與作業程序（policies and procedures）就是管理性控制的範例。

Physical controls are used to limit physical access.
實體控制（Physical controls）用於限制物理存取。

Badge readers, fences, and guard shacks are categorized as physical controls.
門禁讀卡器（badge readers）、圍欄（fences）以及保全崗亭（guard shacks）都屬於實體控制。

Technical controls are implemented using systems.
技術控制（Technical controls）是透過系統來實施的控制措施。

Operating system controls, firewalls, and automated processes are considered technical controls.
作業系統控制（Operating system controls）、防火牆（firewalls）以及自動化流程（automated processes）都被視為技術控制。
=========================================================================================================
Outside Building => Parking and Visitor drop-off(下車)
	=> Fencing(柵欄)，Lighting(大燈)
Reception(接待) => Building lobby(接待大廳)
	=> Access control vestibule(前廳) (門禁前廳)，Security guard(守衛)
DataCenterDoor(資料中心大門) => Entrance frominside building(從大樓內進入)
	=> Access badge(徽章)--通行證，Biometrics(生物辨識)
ServerAdministration => Authentication toserver consolein the data center(管理者登入驗證)
	=> Authentication token (令牌)
=========================================================================================================
Attacker obtains bank account number  and birth date by calling the victim?
	=> Vishing (與音釣魚)
Attacker accesses a database directly  from a web browser
	=> Injection (資料庫注入)
Attacker intercepts all communication between a client and a web server
	=> On-path (中間人攻擊)
Multiple attackers overwhelm a web server
	=> DDoS (癱瘓攻擊)
Attacker obtains a list of all login credentials used  over the last 24 hours
	=> Keylogger (間諜攻擊)
	
On-path (MITM)：攔截並可能篡改雙方通訊。
RFID cloning：複製 RFID 晶片資料以冒用身份。
Keylogger：記錄鍵入資訊（密碼、帳號等）以竊取資料。
Vishing：透過語音電話詐騙取得敏感資訊。
Rootkit：隱藏於系統核心的惡意軟體，持久控制系統。
DDoS：用大量流量或請求癱瘓目標服務。
Injection：將惡意輸入當作程式碼或查詢執行，操控後端。
Supply chain attack：滲透供應鏈或第三方元件，藉信任渠道影響目標。
=========================================================================================================