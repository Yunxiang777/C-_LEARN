===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
struct 是 值型別，用來表示小型、不可變或簡單的資料集合。
class 是 參考型別，適合複雜邏輯、需要繼承、多型的物件導向設計。

class（類別） → 參考型別 (Reference Type)
建立物件時，會放在 Heap（堆積記憶體）。
變數本身存的是「參考 (Reference)」，指向 Heap 的物件。
class Person { public string Name; }
Person p1 = new Person(); // p1 在 Stack，物件在 Heap


struct（結構體） → 值型別 (Value Type)
建立變數時，資料會直接存在 Stack（堆疊記憶體）（或內嵌在其他物件裡）。
複製變數時，會複製整份資料。

Stack = 書疊在桌上，你只拿最上面那本 → 速度快、規矩多
Heap = 倉庫的大箱子，你可以放任何東西，但找起來比較慢 → 空間大、靈活，但要有人整理

4️⃣ 在 C# 裡的應用
int a = 10; → 存在 Stack
var obj = new MyClass(); → 物件存在 Heap，obj 這個「指標」在 Stack 上

Stack 跟 Heap 都是在 RAM（隨機存取記憶體）上分配空間，只是使用方式不一樣。
差別：
特性			Stack						Heap
位置			RAM 的一小塊固定區域			RAM 的大區域，靈活分配
速度			很快（像疊書）					較慢（要找空位）
管理			自動（進入/離開函式就自動收掉）	需要程式或 GC 幫忙整理
適合存什麼	小變數、函式暫存資料			大物件、陣列、class 物件

所以它們都在記憶體裡，但Stack 是「快速、固定」，Heap 是**「大而彈性，但慢一些」**。
===================================================================
枚舉 → int：允許 (int)myEnum（因為 enum 本質就是 int）
int → 枚舉：必須 (MyEnum)myInt（強制轉型，避免誤用）

📌 例子：
OrderStatus s1 = OrderStatus.Delivered; // 枚舉
int i = (int)s1;                        // enum → int
OrderStatus s2 = (OrderStatus)i;        // int → enum
===================================================================
資料夾	內容								性質			是否要進 Git
bin/	最終輸出（.exe、.dll、pdb、config…）	編譯結果		❌ 忽略
obj/	中繼檔（obj、g.cs、assets.json…）	編譯過程暫存	❌ 忽略

👉 總結：
bin/ 是 最終產物
obj/ 是 過程中產物
兩者都不應該進 Git，只要有 .csproj 與原始碼，其他人就能重新建出來。

原始碼（.cs、.config、.resx）
⬇️ 編譯器 (csc / msbuild)
中繼檔案 → 存放在 obj/ 資料夾
⬇️ 連結 / 輸出
最終輸出 → 存放在 bin/ 資料夾
===================================================================
1. / 除法運算子
如果兩邊都是 整數 (int) → 做「整數除法」，小數點後會被捨棄。
如果其中一邊是 浮點數 (double, float) → 會做「小數除法」。

範例：
int a = 7 / 2;       // = 3   (整數除法，0.5 被捨棄)
double b = 7 / 2.0;  // = 3.5 (浮點數除法)

2. % 取餘數運算子 (modulus, modulo)
用來求「除法的餘數」。
範例：
int c = 7 % 2; // = 1   (7 ÷ 2 = 3 餘 1)
int d = 10 % 3; // = 1  (10 ÷ 3 = 3 餘 1)
===================================================================
使用一個簡單的 do while 去寫 login
public static void Main()
{
	bool result = false;
	do{
		string account = Console.ReadLine();
		string password = Console.ReadLine();
		if (account == "123" && password == "456") {
			Console.WriteLine("Login!");
			result = true;
		} else {
			Console.WriteLine("error!");
		}
	} while (result == false);
	Console.WriteLine("welcome~ welcome!");
}
===================================================================
continue: 立即結束本次循環，開始下一次循環。
===================================================================
在 C# ，switch 的 case 必須接'常量'，且最後必須 break
===================================================================
c#，int a ，string b ...，宣告後一定要給值嗎
變數類型		宣告後必須初始化嗎？	備註
-------------------------------------------------------------
局部變數		✅ 是				使用前必須賦值
成員變數		❌ 不必				有預設值，0 / null / false
靜態變數		❌ 不必				有預設值，0 / null / false
===================================================================
using System;

public class Program
{
    public static void Main()
    {
        try
        {
            string a = "123a";
            int b = int.Parse(a); // 注意 Parse 要大寫 P
        }
        catch (Exception e) // Exception 首字母大寫
        {
            Console.WriteLine(e.Message); // 印出例外訊息
        }
    }
}

1️⃣ e 本身
e 是 Exception 物件
它包含很多屬性和方法：
Message → 例外訊息字串
StackTrace → 呼叫堆疊資訊
InnerException → 內部例外
ToString() → 包含例外類型、訊息、堆疊資訊

如果你寫：Console.WriteLine(e);
實際上會呼叫 e.ToString()
===================================================================
1️⃣ int.TryParse 的行為
int.TryParse(string s, out int result) 做了兩件事：
嘗試把字串 s 轉成整數
如果成功 → result 會被設定成對應整數值，並回傳 true
如果失敗 → result 會被 設定成 0，並回傳 false
===================================================================
整數運算自動提升（integer promotion）
int a = 1;
short b = 2;
Console.WriteLine(a + b); => 3

3️⃣ 往上轉型 vs 往下轉型
轉型方向					自動 / 顯式		風險
小 → 大（short → int）	自動	安全，		無資料丟失
大 → 小（int → short）	顯式 (short)		可能溢位 / 資料丟失
===================================================================
int a = 1;
int b = 2;
Console.WriteLine( (a + b) / 2f); // 2f 強制轉型
=> 1.5
如果兩邊型別不同，C# 會自動往「不會丟失資料」的方向轉型。
常見轉換順序（由低到高）： int → float → double → decimal
===================================================================
C#邏輯口訣: 括號為優先，乘除後加減，比較後邏輯，最後左到右
&& (邏輯 AND) 比 || (邏輯 OR) 優先。 => Console.WriteLine(false || true && true); => true
===================================================================
&& 與 & ，|| 跟 | ，結果相同，但有甚麼區別?
在 C#（還有 Java、C、C++）裡，&& / || 和 & / | 看起來很像，有時候結果一樣，但其實語意不同。
&& 和 || → 邏輯運算子 (Logical operators)
& 和 | → 位元運算子 (Bitwise operators)，但在 C# 裡如果用在 bool 上，也能當 邏輯運算子。
&& 和 || 會「短路」，也就是 一旦結果已經確定，就不會繼續計算右邊
& 和 | 不會短路，兩邊一定都會執行

(B) 位元運算 (Bitwise)
& 和 | 也可以用在整數（int, byte 等），逐位元運算
&& 和 || 只能用在布林運算
int x = 6;   // 二進位 110
int y = 3;   // 二進位 011
Console.WriteLine(x & y);  // 010 → 2
Console.WriteLine(x | y);  // 111 → 7

在 C# 裡：
如果運算子兩邊是 布林值 (bool) → & / | 會被當作 邏輯運算子
如果運算子兩邊是 整數型別 (int, byte, long, …) → & / | 會被當作 位元運算子
換句話說，編譯器根據「運算元的型別」來決定意義。
===================================================================
string person = Console.ReadLine();
Console.WriteLine($"Hello, {(person == "老王" ? "你好" : "流氓")}!");
為甚麼 加了 括號 ( ... ) ，就沒事了?
在 C# 裡，字串插值 $"Hello, { ... }!" 裡面會先計算大括號 { ... } 裡面的 運算式，再把結果轉成字串。
( ... ) 明確告訴編譯器這整段是單一運算式
編譯器先計算括號裡的三元運算子：
person == "老王" ? "你好" : "流氓"
→ 結果是一個字串
然後把結果放進 $"..." 裡面 → 完全沒有歧義
===================================================================
三元運算子的語法：
condition ? value_if_true : value_if_false;
必須有回傳值
===================================================================
1. Unicode？
在電腦早期，不同國家有不同的編碼方式：
美國用 ASCII（7 bit，最多 128 個字元，只能表示英文字母、數字、符號）
台灣常用 BIG5（繁體中文）
日本用 Shift-JIS
大陸用 GB2312/GBK
問題是：👉 同一個二進位數字，在不同編碼系統裡，可能代表完全不同的字！導致「亂碼問題」。

2. Unicode 是什麼？
Unicode 就是為了解決亂碼問題而設計的： 一套 全球統一的字元編碼標準
為世界上每一個文字（不管是英文、中文、日文、韓文、emoji…）分配一個 唯一的編號 (code point)
這個編號通常寫成 U+xxxx（16 進位）

例子：
'A' → U+0041
'中' → U+4E2D
'😃' → U+1F603

3. Unicode 和 char 的關係
在 C#： char 採用 UTF-16 編碼（Unicode 的一種實作方式）
意味著一個 char 固定是 2 byte (16 bit)
可以存一個 Unicode 基本平面 (BMP, U+0000 ~ U+FFFF) 的字元
👉 但超過 U+FFFF 的字（例如 emoji）需要 兩個 char（代理對，surrogate pair） 來表示。

✅ 一句話總結
Unicode 字元就是「全世界所有文字的唯一編號」，每個字都有一個代號（U+xxxx），避免亂碼。
===================================================================
在 C# 中，一個 char 固定佔 2 個 byte (16 bit)，
用的是 UTF-16 編碼，能直接表示大多數常見的 Unicode 字元。
===================================================================
floate的精度 => 7位
小數，默認是double類型，但最常用的是floate
===================================================================
1. bit（位元）
電腦裡最小的資料單位
一個 bit 只能表示 0 或 1
例如：1011 就是 4 個 bit

2. byte（位元組）
1 byte = 8 bit
因為 8 個 bit 可以組合出 2⁸ = 256 種可能（0 ~ 255）
所以一個 byte 能表示 0～255 的數字，或者一個英文字母（ASCII 編碼）
===================================================================
多行註解（加 //） Ctrl+K, Ctrl+C => Ctrl+U(解開)
Ctrl+K => 刪掉該行
===================================================================
傳統寫法
以前寫 C# Console App，你一定要有 class 和 Main() 方法作為程式入口：
using System;
class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine("Hello, World!");
    }
}
這是 完整的「傳統 C# 程式骨架」

2. 簡化寫法（C# 9 / .NET 5 之後）
從 C# 9 開始，可以省略 class Program 和 Main()，直接在檔案最上方寫程式碼：
Console.WriteLine("Hello, World!");
編譯器會自動幫你生成「隱藏的 class 與 Main()」來包住這段程式碼。
這叫 Top-level statements（頂層語句）
目的是 讓初學者更容易上手，不用先理解類別與方法。
===================================================================
C# 編譯 > IL > 打包進 .exe / .dll > 執行 > CLR參戰 > CLR載入IL 
	> JIT把IL轉成機器碼 > CPU執行機器碼
===================================================================