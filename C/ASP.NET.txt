================================================================
================================================================
================================================================
================================================================
================================================================
================================================================
================================================================
================================================================
================================================================
================================================================
1️⃣ 跨平台 (Cross-Platform) 定義

跨平台指的是：

軟體或程式可以在 不同作業系統上運行，不依賴特定 OS 或環境。

例子：

Windows

Linux

macOS

特點：

同一份程式碼可以在不同 OS 上執行

可以用同樣方式編譯與部署

2️⃣ IIS 的限制

IIS = Internet Information Services

Windows 專用的 Web Server

只能在 Windows 上運行

無法部署到 Linux / macOS → 所以不跨平台

3️⃣ Kestrel 的跨平台特性

Kestrel 是 ASP.NET Core 內建 Web Server

支援 Windows / Linux / macOS

不依賴 IIS 或 Windows 專有 API

可以直接當 Web Server 使用，也可以放在 反向代理（Reverse Proxy）後面：

Nginx (Linux)

Apache (Linux)

IIS (Windows)
================================================================
Visual Studio 建立 ASP.NET Core Web API 專案時，因為 ASP.NET Core 是 跨平台的，所以它不依賴 IIS 或 Windows 專屬 Web Server
1️⃣ ASP.NET Core 預設 Server：Kestrel

Kestrel 是 ASP.NET Core 內建的跨平台 Web Server。

特點：

跨平台：Windows、Linux、macOS 都能跑

高效能，適合直接對外服務（Production）或配合反向代理（例如 Nginx / IIS）

支援 HTTP/HTTPS

在 Visual Studio 建立的 Web API 專案中：

dotnet run 或 F5 啟動時，專案就會用 Kestrel 來監聽指定的端口（例如 5000 / 5001，或你看到的 5165 / 7150）。
================================================================
<Nullable>disable</Nullable> => 警告提示
<ImplicitUsings>enable</ImplicitUsings> => using 從預設載入改成強制
================================================================
[ApiController] 只是「告訴框架這個 Controller 是 API 用的」，並不改變繼承鏈。

框架在啟動時會檢查你的 Controller 上有沒有 [ApiController]，如果有：

啟用自動模型驗證

啟用自動 400 回應

自動推斷參數綁定

它是屬性，不是父類別，所以你不用「繼承」它，只要標註即可。
================================================================
怎樣算是「完美的 RESTful API」？

符合下列條件：

資源 URL 清晰且語意化：不用動詞，而是名詞。

HTTP 方法正確使用：GET 查詢、POST 建立、PUT/PATCH 更新、DELETE 刪除。

使用適當的 HTTP 狀態碼：

200 OK（成功查詢）

201 Created（成功建立）

204 No Content（刪除成功，不需回應內容）

400 Bad Request（請求格式錯誤）

401 Unauthorized（未認證）

404 Not Found（資源不存在）

500 Internal Server Error（伺服器錯誤）

無狀態：每個請求獨立，驗證用 Token。

一致的資料格式：例如統一回傳 JSON，錯誤格式統一：

{ "error": "UserNotFound", "message": "User with ID 123 not found" }
================================================================
1. REST 是什麼？

REST（Representational State Transfer）
是 Roy Fielding 博士在 2000 年提出的一種 Web API 設計風格，不是一個標準或協定。

它的核心概念是：

資源（Resource） → 用 URI 來標識，例如 /users/1

動作（Action） → 用 HTTP 方法 來表達，例如 GET、POST、PUT、DELETE

狀態轉移（State Transfer） → 客戶端透過 HTTP 請求改變或查詢資源的狀態

2. RESTful API 的設計原則

一個 API 要稱得上 RESTful，通常需要遵循以下原則：

(1) 資源導向（Resource-Oriented）

每個 資源 都要有唯一的 URL。
✅ /users/123 代表 ID 為 123 的使用者。
❌ /getUserById?id=123（不夠 RESTful，因為動作藏在 URL）。

(2) 使用 HTTP 方法表示動作

GET /users → 取得所有使用者

GET /users/123 → 取得 ID=123 的使用者

POST /users → 建立新使用者

PUT /users/123 → 更新 ID=123 的使用者（整個物件）

PATCH /users/123 → 更新 ID=123 的部分欄位

DELETE /users/123 → 刪除 ID=123 的使用者

(3) 無狀態（Stateless）

伺服器 不應保存用戶端的會話狀態。

每個請求都應該包含必要的驗證資訊（例如 JWT Token）。

(4) 統一介面（Uniform Interface）

資源表現形式（Representation）應統一，例如回傳 JSON 或 XML。

資源 URL 應該清晰一致，例如 /orders/123/items。
================================================================
那如果有人說 asp.net 8，web api，我怎麼知道他是 core 還是 framework
這是一個關鍵問題 👌
其實判斷方法很簡單，只要看到 .NET 5、.NET 6、.NET 7、.NET 8...，就一定是 Core 架構（雖然名稱裡不再寫 Core）。

為什麼？

.NET Framework：最後一版是 4.8.1，微軟已經停止繼續更新大版本。

.NET Core：從 .NET 5 (2020) 開始，微軟把「Core」字拿掉，改叫 .NET X。

例如 .NET 5、.NET 6、.NET 7、.NET 8 都屬於「ASP.NET Core」家族。

但官方名稱會寫成 ASP.NET Core on .NET 8。

所以你的例子：

如果有人說：「ASP.NET 8 Web API」
👉 一定是指 ASP.NET Core Web API (跑在 .NET 8)。
👉 不可能是舊的 .NET Framework，因為它沒有 8 這個版本。

判斷速查表
名稱	代表什麼
ASP (Classic)	1996 年的老 ASP，副檔名 .asp
ASP.NET (.NET Framework 2.0 ~ 4.8.1)	舊世代，只能 Windows + IIS
ASP.NET Core (.NET Core 1.0 ~ 3.1)	新架構，跨平台，高效能
ASP.NET Core on .NET 5+ (.NET 5, 6, 7, 8...)	現在主流，名字只叫「.NET」，但本質上就是 ASP.NET Core

✅ 總結：
只要有人說 ASP.NET 8 Web API，就是 ASP.NET Core Web API on .NET 8。
👉 舊的 ASP.NET Framework 停在 4.8.1，不會出現「8」。
================================================================
ASP 是什麼？
ASP 全名：Active Server Pages
它是 微軟在 1996 年推出的伺服器端動態網頁技術。
主要功能是：在伺服器上跑程式碼（早期是 VBScript、JScript），產生 HTML 再傳給瀏覽器。
可以想像成「在伺服器裡先算好資料，再把結果送給用戶端」。

ASP 的發展歷程

ASP (Classic ASP)

最早的版本，檔案副檔名是 .asp

語法像 VBScript。

現在幾乎淘汰。

ASP.NET (2002 起)

基於 .NET Framework。

支援 C# / VB.NET 來寫伺服器程式。

常見的開發模式：

Web Forms (.aspx 頁面) → 拖拉控制項、事件導向。

ASP.NET MVC → MVC 架構。

ASP.NET Web API → 提供 API，讓前端或 App 使用。

ASP.NET Core (2016 起)

全新跨平台版本，不再依賴 IIS 和 Windows。

可在 Windows / Linux / macOS 執行。

整合了 MVC、Web API、Razor Pages。

後來 .NET 5 之後就簡稱「ASP.NET Core」。

簡單比喻

ASP (Classic) = 古早味的動態網頁，像用「計算機 + HTML」混合在一起。

ASP.NET = 把 C# 引進來，可以寫更大型的網站。

ASP.NET Core = 新世代，跨平台 + 高效能，現在幾乎是主流。
================================================================