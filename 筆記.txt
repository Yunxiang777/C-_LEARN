===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
1. Unicode？
在電腦早期，不同國家有不同的編碼方式：
美國用 ASCII（7 bit，最多 128 個字元，只能表示英文字母、數字、符號）
台灣常用 BIG5（繁體中文）
日本用 Shift-JIS
大陸用 GB2312/GBK
問題是：👉 同一個二進位數字，在不同編碼系統裡，可能代表完全不同的字！導致「亂碼問題」。

2. Unicode 是什麼？
Unicode 就是為了解決亂碼問題而設計的： 一套 全球統一的字元編碼標準
為世界上每一個文字（不管是英文、中文、日文、韓文、emoji…）分配一個 唯一的編號 (code point)
這個編號通常寫成 U+xxxx（16 進位）

例子：
'A' → U+0041
'中' → U+4E2D
'😃' → U+1F603

3. Unicode 和 char 的關係
在 C#： char 採用 UTF-16 編碼（Unicode 的一種實作方式）
意味著一個 char 固定是 2 byte (16 bit)
可以存一個 Unicode 基本平面 (BMP, U+0000 ~ U+FFFF) 的字元
👉 但超過 U+FFFF 的字（例如 emoji）需要 兩個 char（代理對，surrogate pair） 來表示。

✅ 一句話總結
Unicode 字元就是「全世界所有文字的唯一編號」，每個字都有一個代號（U+xxxx），避免亂碼。
===================================================================
在 C# 中，一個 char 固定佔 2 個 byte (16 bit)，
用的是 UTF-16 編碼，能直接表示大多數常見的 Unicode 字元。
===================================================================
floate的精度 => 7位
小數，默認是double類型，但最常用的是floate
===================================================================
1. bit（位元）
電腦裡最小的資料單位
一個 bit 只能表示 0 或 1
例如：1011 就是 4 個 bit

2. byte（位元組）
1 byte = 8 bit
因為 8 個 bit 可以組合出 2⁸ = 256 種可能（0 ~ 255）
所以一個 byte 能表示 0～255 的數字，或者一個英文字母（ASCII 編碼）
===================================================================
多行註解（加 //） Ctrl+K, Ctrl+C => Ctrl+U(解開)
Ctrl+K => 刪掉該行
===================================================================
傳統寫法
以前寫 C# Console App，你一定要有 class 和 Main() 方法作為程式入口：
using System;
class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine("Hello, World!");
    }
}
這是 完整的「傳統 C# 程式骨架」

2. 簡化寫法（C# 9 / .NET 5 之後）
從 C# 9 開始，可以省略 class Program 和 Main()，直接在檔案最上方寫程式碼：
Console.WriteLine("Hello, World!");
編譯器會自動幫你生成「隱藏的 class 與 Main()」來包住這段程式碼。
這叫 Top-level statements（頂層語句）
目的是 讓初學者更容易上手，不用先理解類別與方法。
===================================================================
C# 編譯 > IL > 打包進 .exe / .dll > 執行 > CLR參戰 > CLR載入IL 
	> JIT把IL轉成機器碼 > CPU執行機器碼
===================================================================