===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
在資料庫裡，事務（Transaction） 是一個 不可分割的工作單位，用來確保資料的一致性與正確性。

🔹 事務的定義

事務就是一組 SQL 操作（通常是多個 DML 語句），要嘛 全部成功，要嘛 全部失敗。

如果中途出錯，事務可以回滾（Rollback）到執行前的狀態，避免資料庫進入「不一致」的狀況。

👉 可以想像成：「銀行轉帳」就是典型事務。

A 的帳戶扣 100 元

B 的帳戶加 100 元
這兩個動作必須同時完成；如果只完成一半，資料就錯亂了。

🔹 事務的 4 大特性（ACID）

事務最重要的就是 ACID 原則：

Atomicity（原子性）

事務中的所有操作要嘛全部完成，要嘛全部不做。

就像原子不可再分，事務也是「不可分割」。

Consistency（一致性）

事務執行前後，資料庫要保持一致的狀態。

例如銀行轉帳，總金額不會憑空消失或增加。

Isolation（隔離性）

多個事務同時進行時，彼此不應互相干擾。

就像同時有兩個人轉帳，結果不能混亂。

Durability（持久性）

事務一旦提交（Commit），結果就會永久保存在資料庫，不會因系統故障而消失。

🔹 常見的事務控制指令 (TCL)

BEGIN 或 START TRANSACTION → 開始事務

COMMIT → 提交，讓事務的修改永久生效

ROLLBACK → 回滾，撤銷事務中的操作

SAVEPOINT → 設定事務的儲存點，可以回滾到特定位置
===========================================================================================================
DDL（Data Definition Language，資料定義語言）

用來 定義或修改資料庫的結構，例如建立、刪除或修改 資料表、索引、架構 等。
屬於 結構層級的操作。

常見指令：

CREATE：建立（資料庫、資料表、索引…）

ALTER：修改（資料表結構、欄位型別…）

DROP：刪除（資料表、索引、資料庫…）

TRUNCATE：清空資料表內容（但保留結構）

📌 特性：

會直接影響資料庫結構。

多數 DDL 指令執行後 無法回滾 (Rollback)。

🔹 DML（Data Manipulation Language，資料操作語言）

用來 操作資料內容，例如新增、刪除、修改或查詢資料表中的資料列。
屬於 資料層級的操作。

常見指令：

INSERT：新增資料

UPDATE：修改資料

DELETE：刪除資料

SELECT：查詢資料（有時被歸類為 DQL，Data Query Language，但通常也算 DML）

📌 特性：

主要針對 資料本身。

可搭配 交易控制語言 (TCL)（例如 COMMIT, ROLLBACK）來控制。

✅ 總結

DDL：改「房子結構」 → 建立/拆除/改造表格

DML：改「房子裡的東西」 → 新增/修改/刪除資料
===========================================================================================================
DBMS: 數據庫管理系統 > 管數據庫的
用戶 > DBMS > 管理數據庫
位於用戶與操作系統之間的一層數據管理系統
===========================================================================================================
數據 > 數據存放的倉庫 < 數據庫管理系統 < 數據庫系統
===========================================================================================================
數據庫特點
1.永久2.有組織3.可共享
===========================================================================================================