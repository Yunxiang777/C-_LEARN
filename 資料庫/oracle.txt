===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
🔹 Oracle 的段（Segment）種類
1. 數據段（Data Segment）

用來存放 資料表（Table） 的實際資料。

每當建立一張表，Oracle 就會為它建立一個數據段。

表中的每一筆 row（資料列） 都會存放在數據段裡。

📌 例：學生 資料表中的所有學生記錄，都存在「數據段」。

2. 索引段（Index Segment）

用來存放 索引（Index） 的資料。

索引是一種加速查詢的資料結構（通常是 B-Tree 或 Bitmap）。

每個索引都會有一個對應的索引段，獨立於數據段。

📌 例：如果在 學生(學號) 建立索引，那 學號 的索引就存放在「索引段」。

3. 臨時段（Temporary Segment）

用來存放 臨時資料（查詢過程中需要的中間結果）。

例如：ORDER BY、GROUP BY、建立索引時，Oracle 會用臨時段存放計算過程。

當操作完成後，臨時段會被釋放（或重複利用 TEMP 表空間）。

📌 例：SELECT * FROM 學生 ORDER BY 姓名 → 排序時使用「臨時段」。

4. 回滾段（Rollback Segment / Undo Segment）

用來存放事務中 修改前的舊值，確保事務支援 回滾 (ROLLBACK) 與 讀一致性 (Read Consistency)。

當一個事務要回滾時，Oracle 會利用回滾段中的舊值還原資料。

12c 之後，回滾段改稱 Undo Segment。

📌 例：

UPDATE 學生 SET 姓名='小強' WHERE 學號='S001';


👉 Oracle 會把「修改前的姓名（小明）」存到回滾段，如果事務失敗或 ROLLBACK，可以還原。

🔹 總結對照表
段 (Segment)	作用	例子
數據段 (Data Segment)	存放資料表的實際資料	學生表 的所有記錄
索引段 (Index Segment)	存放索引結構	學生(學號) 索引
臨時段 (Temporary Segment)	存放排序/查詢的中間結果	ORDER BY 姓名
回滾段 (Rollback / Undo Segment)	存放修改前的舊值，支援回滾與一致性	UPDATE 前的舊資料

✅ 一句話總結：
Oracle 的「段」就是資料庫存放不同類型資訊的邏輯區塊：

數據段存資料

索引段存索引

臨時段存中間結果

回滾段存舊資料（支援事務）
===========================================================================================================
一、Oracle Database「版本代號」 (Release Naming)

Oracle 在不同時代用不同字母來代表產品特性：

版本	代號含義	範例
V (Version)	最早的版本命名，V2（1979 年，世界第一個商業 SQL RDBMS）	Oracle V2
i (Internet)	支援 Internet 應用（Java, XML, Web 技術）	Oracle 8i, 9i
g (Grid)	支援 Grid Computing（網格運算）	Oracle 10g, 11g
c (Cloud)	支援 Cloud Computing（雲端、多租戶架構 CDB/PDB）	Oracle 12c
數字年號化	直接用年份表示版本	Oracle 18c (2018), 19c (2019, LTS), 21c (2021)

👉 目前企業最常用的是 Oracle 19c（長期支援版，最穩定）。

🔹 二、Oracle Database「產品版本」 (Editions)

不同版本（Edition）功能差異，決定了你能用的功能和授權模式：

Edition	簡稱	功能 & 適用情境
Enterprise Edition	EE	功能最完整（RAC, Partition, 高可用性, 高階安全性），大企業核心系統使用，授權最貴
Standard Edition / Standard Edition 2	SE / SE2	功能較少（不支援 RAC、部分高階功能），限制 CPU 數，適合中小企業
Express Edition	XE	免費，功能有限制（2 CPU, 2GB RAM, 12GB DB 限制），用於學習/測試/小型應用
Personal Edition	PE	幾乎等同 EE，但僅限單機，適合開發人員本機開發
Lite Edition	–	早期才有，後來停用

✅ 總結一句話：

「V/i/g/c」是版本代號 → 說明當時 Oracle 的設計方向（Internet、Grid、Cloud...）。

「EE/SE/XE...」是產品版本 → 決定你能用的功能多少、授權模式，以及成本。
===========================================================================================================
關聯式資料庫（Relational Database, RDB） 是目前最常見的資料庫模型，例如 MySQL、PostgreSQL、SQL Server、Oracle 等。它的核心概念是用 表格（Table） 來儲存資料，並透過「關聯（Relation）」連結不同的表格。

🔹 關聯式資料庫的主要特性
1. 表格結構化（Structured as Tables）

資料以 行（Row, Tuple） 和 列（Column, Attribute） 的方式儲存。

每一行是一筆資料（實體），每一列是一個欄位（屬性）。

例：學生 資料表

學號	姓名	系所
S001	小明	資工
S002	小華	資管
2. 關聯性（Relationships Between Tables）

表格之間可以透過 主鍵（Primary Key） 和 外鍵（Foreign Key） 來建立關聯。

支援 一對一、一對多、多對多 的關係。

例：

學生(學號) ←→ 選課(學號, 課程編號) ←→ 課程(課程編號)

3. 數據一致性（Data Integrity）

關聯式資料庫提供多種 完整性約束（Integrity Constraints）：

實體完整性：每一筆資料有唯一的主鍵（Primary Key）。

參考完整性：外鍵（Foreign Key）必須對應到另一張表中的有效資料。

域完整性：欄位的資料型別和值必須合法（例如 年齡 不能是負數）。

4. SQL 語言支援

使用 SQL（Structured Query Language） 來進行資料定義（DDL）、操作（DML）、查詢（DQL）與控制（TCL）。

讓使用者能夠方便地進行 新增、刪除、修改、查詢。

5. 事務管理（Transaction Management）

支援 ACID 特性（原子性、一致性、隔離性、持久性）。

確保資料在多用戶存取時仍然正確，不會出現錯亂。

6. 數據獨立性（Data Independence）

邏輯獨立性：修改資料表的結構，不一定會影響應用程式。

物理獨立性：底層存放方式改變，不影響 SQL 操作。

7. 高可擴展性與安全性

提供使用者、角色、權限管理。

支援大規模資料處理與索引（Index）優化查詢。
===========================================================================================================
🔹 1. 實體（Entity）

「實體」是 現實世界中可被明確區分的個體。

在資料庫裡，通常對應到一筆「資料列（row, record）」。

例：某個學生（學號 S001、名字小明）就是一個「實體」。

🔹 2. 實體型（Entity Type）

實體型 就是「某一類實體的型別或描述」，可以理解為「類別（class）」。

它描述一群性質相同的物件應該有哪些屬性。

在資料庫裡，通常對應到一張「資料表（table schema）」。

📌 例子：

學生（Student）就是一個實體型。

它定義了學生應該有的屬性：學號、姓名、生日。

🔹 3. 實體集（Entity Set）

實體集 是某個實體型下，所有「實體的集合」。

在資料庫裡，對應到「資料表中所有的資料列」。

📌 例子：

如果「學生」是實體型，那麼所有在校學生（小明、小華、小美…）就是「學生實體集」。

用 SQL 表示：

學生 (S001, 小明, 2001-01-01)

學生 (S002, 小華, 2002-02-02)

學生 (S003, 小美, 2001-03-03)
→ 這些加起來就是「學生實體集」。

🔹 簡單對照表
概念	說明	資料庫對應	範例
實體（Entity）	現實世界中的「個體」	一筆資料（row）	學號 S001 的小明
實體型（Entity Type）	描述一類實體的「型別」	資料表的結構（schema）	學生 (學號, 姓名, 生日)
實體集（Entity Set）	某個實體型下所有實體的集合	整張資料表（table）	學生表裡的所有學生資料

✅ 一句話總結：

實體型：規格 → 定義「學生」應該有哪些屬性

實體：個體 → 小明是某個學生

實體集：群體 → 學生表裡的所有學生
===========================================================================================================
ER 圖（Entity-Relationship Diagram，實體關聯圖） 是資料庫設計中常用的圖表，用來描述 資料庫的結構，特別是「資料表之間的關係」。

🔹 ER 圖的基本元素

Entity（實體）

就是現實世界中的「物件」或「概念」，在資料庫裡通常會變成一張「資料表」。

用 矩形 表示。

例如：學生、課程、訂單。

Attribute（屬性）

實體的特徵，也就是「欄位」。

用 橢圓形 表示。

例如：學生 有 學號、姓名、生日。

Relationship（關聯）

實體之間的關係。

用 菱形 表示。

例如：學生 選修 課程。

🔹 關係的種類

在 ER 圖中，實體之間的關係有幾種常見類型：

一對一 (1:1)

一個實體對應到另一個實體的「唯一」資料。

例：每個人只有一個身分證。

一對多 (1:N)

一個實體可以對應到多個另一個實體。

例：一個「老師」可以教多門「課程」。

多對多 (M:N)

一個實體的多個資料可以對應到另一個實體的多個資料。

例：學生可以選多門課程，一門課程也能被多個學生選修。

🔹 ER 圖的用途

幫助 資料庫設計師 規劃表格和欄位。

提供團隊溝通的視覺化模型。

在 轉換成關聯式資料庫 前，先把需求具體化。

✅ 一句話總結：
ER 圖是一種用「圖形方式」設計資料庫結構的方法，把 實體（表格）、屬性（欄位） 和 關聯（表格關係） 視覺化。
===========================================================================================================
在資料庫裡，事務（Transaction） 是一個 不可分割的工作單位，用來確保資料的一致性與正確性。

🔹 事務的定義

事務就是一組 SQL 操作（通常是多個 DML 語句），要嘛 全部成功，要嘛 全部失敗。

如果中途出錯，事務可以回滾（Rollback）到執行前的狀態，避免資料庫進入「不一致」的狀況。

👉 可以想像成：「銀行轉帳」就是典型事務。

A 的帳戶扣 100 元

B 的帳戶加 100 元
這兩個動作必須同時完成；如果只完成一半，資料就錯亂了。

🔹 事務的 4 大特性（ACID）

事務最重要的就是 ACID 原則：

Atomicity（原子性）

事務中的所有操作要嘛全部完成，要嘛全部不做。

就像原子不可再分，事務也是「不可分割」。

Consistency（一致性）

事務執行前後，資料庫要保持一致的狀態。

例如銀行轉帳，總金額不會憑空消失或增加。

Isolation（隔離性）

多個事務同時進行時，彼此不應互相干擾。

就像同時有兩個人轉帳，結果不能混亂。

Durability（持久性）

事務一旦提交（Commit），結果就會永久保存在資料庫，不會因系統故障而消失。

🔹 常見的事務控制指令 (TCL)

BEGIN 或 START TRANSACTION → 開始事務

COMMIT → 提交，讓事務的修改永久生效

ROLLBACK → 回滾，撤銷事務中的操作

SAVEPOINT → 設定事務的儲存點，可以回滾到特定位置
===========================================================================================================
DDL（Data Definition Language，資料定義語言）

用來 定義或修改資料庫的結構，例如建立、刪除或修改 資料表、索引、架構 等。
屬於 結構層級的操作。

常見指令：

CREATE：建立（資料庫、資料表、索引…）

ALTER：修改（資料表結構、欄位型別…）

DROP：刪除（資料表、索引、資料庫…）

TRUNCATE：清空資料表內容（但保留結構）

📌 特性：

會直接影響資料庫結構。

多數 DDL 指令執行後 無法回滾 (Rollback)。

🔹 DML（Data Manipulation Language，資料操作語言）

用來 操作資料內容，例如新增、刪除、修改或查詢資料表中的資料列。
屬於 資料層級的操作。

常見指令：

INSERT：新增資料

UPDATE：修改資料

DELETE：刪除資料

SELECT：查詢資料（有時被歸類為 DQL，Data Query Language，但通常也算 DML）

📌 特性：

主要針對 資料本身。

可搭配 交易控制語言 (TCL)（例如 COMMIT, ROLLBACK）來控制。

✅ 總結

DDL：改「房子結構」 → 建立/拆除/改造表格

DML：改「房子裡的東西」 → 新增/修改/刪除資料
===========================================================================================================
DBMS: 數據庫管理系統 > 管數據庫的
用戶 > DBMS > 管理數據庫
位於用戶與操作系統之間的一層數據管理系統
===========================================================================================================
數據 > 數據存放的倉庫 < 數據庫管理系統 < 數據庫系統
===========================================================================================================
數據庫特點
1.永久2.有組織3.可共享
===========================================================================================================